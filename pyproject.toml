[build-system]
requires = ["hatchling >= 1.26"]
build-backend = "hatchling.build"

[project]
name = "fractal-attention-analysis"
version = "0.1.0"
description = "Fractal-Attention Analysis (FAA) Framework for LLM Interpretability using Golden Ratio Transformations"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Andre Ross", email = "devops.ross@gmail.com"},
    {name = "Leorah Ross", email = "leorah@ross-developers.com"},
    {name = "Eyal Atias", email = "eyal@hooking.co.il"},
]
maintainers = [
    {name = "Andre Ross", email = "devops.ross@gmail.com"},
]
keywords = [
    "llm",
    "interpretability",
    "attention-mechanism",
    "fractal-analysis",
    "transformer",
    "explainable-ai",
    "xai",
    "deep-learning",
    "natural-language-processing",
    "nlp",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "torch >= 2.0.0",
    "transformers >= 4.30.0",
    "numpy >= 1.24.0",
    "scipy >= 1.10.0",
    "matplotlib >= 3.7.0",
    "seaborn >= 0.12.0",
    "pandas >= 2.0.0",
    "scikit-learn >= 1.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest >= 7.4.0",
    "pytest-cov >= 4.1.0",
    "black >= 23.7.0",
    "flake8 >= 6.1.0",
    "mypy >= 1.5.0",
    "isort >= 5.12.0",
    "pre-commit >= 3.3.0",
]
docs = [
    "sphinx >= 7.1.0",
    "sphinx-rtd-theme >= 1.3.0",
    "sphinx-autodoc-typehints >= 1.24.0",
]
gpu = [
    "GPUtil >= 1.4.0",
]
all = [
    "fractal-attention-analysis[dev,docs,gpu]",
]

[project.urls]
Homepage = "https://github.com/ross-sec/fractal-attention-analysis"
Documentation = "https://github.com/ross-sec/fractal-attention-analysis#readme"
Repository = "https://github.com/ross-sec/fractal-attention-analysis"
"Bug Tracker" = "https://github.com/ross-sec/fractal-attention-analysis/issues"
Changelog = "https://github.com/ross-sec/fractal-attention-analysis/blob/main/CHANGELOG.md"

[project.scripts]
faa-analyze = "fractal_attention_analysis.cli:main"
faa-compare = "fractal_attention_analysis.cli:compare_models"

[tool.hatchling.build.targets.wheel]
packages = ["src/fractal_attention_analysis"]

[tool.hatchling.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--cov=fractal_attention_analysis",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.coverage.run]
source = ["src/fractal_attention_analysis"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

